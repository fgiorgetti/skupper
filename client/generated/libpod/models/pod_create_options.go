// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodCreateOptions PodCreateOptions provides all possible options for creating a pod and its infra container
//
// swagger:model PodCreateOptions
type PodCreateOptions struct {

	// c group parent
	CGroupParent string `json:"CGroupParent,omitempty"`

	// cpus
	Cpus float64 `json:"Cpus,omitempty"`

	// cpuset cpus
	CpusetCpus string `json:"CpusetCpus,omitempty"`

	// create command
	CreateCommand []string `json:"CreateCommand"`

	// hostname
	Hostname string `json:"Hostname,omitempty"`

	// infra
	Infra bool `json:"Infra,omitempty"`

	// infra command
	InfraCommand string `json:"InfraCommand,omitempty"`

	// infra conmon pid file
	InfraConmonPidFile string `json:"InfraConmonPidFile,omitempty"`

	// infra image
	InfraImage string `json:"InfraImage,omitempty"`

	// infra name
	InfraName string `json:"InfraName,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// net
	Net *NetOptions `json:"Net,omitempty"`

	// pid
	Pid string `json:"Pid,omitempty"`

	// share
	Share []string `json:"Share"`

	// userns
	Userns *Namespace `json:"Userns,omitempty"`
}

// Validate validates this pod create options
func (m *PodCreateOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodCreateOptions) validateNet(formats strfmt.Registry) error {
	if swag.IsZero(m.Net) { // not required
		return nil
	}

	if m.Net != nil {
		if err := m.Net.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Net")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Net")
			}
			return err
		}
	}

	return nil
}

func (m *PodCreateOptions) validateUserns(formats strfmt.Registry) error {
	if swag.IsZero(m.Userns) { // not required
		return nil
	}

	if m.Userns != nil {
		if err := m.Userns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Userns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Userns")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pod create options based on the context it is used
func (m *PodCreateOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodCreateOptions) contextValidateNet(ctx context.Context, formats strfmt.Registry) error {

	if m.Net != nil {
		if err := m.Net.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Net")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Net")
			}
			return err
		}
	}

	return nil
}

func (m *PodCreateOptions) contextValidateUserns(ctx context.Context, formats strfmt.Registry) error {

	if m.Userns != nil {
		if err := m.Userns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Userns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Userns")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodCreateOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodCreateOptions) UnmarshalBinary(b []byte) error {
	var res PodCreateOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
