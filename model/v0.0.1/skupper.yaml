skupper:
  # default initialization options
  name: "site-1"
  console: "true"
  console-authentication: "internal"
  router-logging: "info"
  router-mode: "interior"
  # type should be one of: kubernetes, systemd, podman, docker
  type: "kubernetes"
  # since kubernetes was informed, skupper expects for a kubernetes options
  kubernetes:
    ingress: "loadbalancer"
    ingress-annotations:
      - key: "value"
    ingress-host: "host.domain"
    annotations:
      - key: "value"
    labels:
      - key: "value"
    service-controller: "true"
    service-sync: "true"
    create-network-policy: "true"
    routers: 1
    router-cpu: ""
    router-cpu-limit: ""
    router-memory: ""
    router-memory-limit: ""
    router-node-selector: ""
    router-pod-affinity: ""
    router-pod-antiaffinity: ""
    router-ingress-host: ""
    router-service-annotations:
      - key: "value"
    router-load-balancer-ip: ""
    controller-cpu: ""
    controller-cpu-limit: ""
    controller-memory: ""
    controller-memory-limit: ""
    controller-node-selector: ""
    controller-pod-affinity: ""
    controller-pod-antiaffinity: ""
    controller-ingress-host: ""
    controller-service-annotations:
      - key: "value"
    controller-load-balancer-ip: ""
  # systemd|docker|podman will be (optionally) needed depending on the kind of site being declared
  systemd:
    tbd: "tbd"
  docker:
    tbd: "tbd"
  podman:
    tbd: "tbd"
  # list of services to be created/exposed
  services:
    # only the common fields (to all kind of sites):
    - address: "my-service"
      protocol: "http"
      ports:
        - 8080: 8080
      # one of kubernetes, systemd, docker or podman will be expected
      # expected type will be same used in the site options
      kubernetes:
        waitTargetAvailable: true
        dependsOn:
          - "my-service-b"
          - "my-service-c"
        target: # one of
          selectors:
            - key: "value"
          service:
            name: "my-service"
            skipIngress: "true" # if true (default is false) ingress will not be routed through Skupper
            external: "true" # if true (default is false) the service is expected to be created by an external provider (like an operator)
      systemd|docker|podman:
        # following port/remote are non-k8s exclusive, but we could publish the address through service-sync (running from systemd|docker|podman)
        # so no need to create a service for a systemd site in a k8s site first
        mapping:
          - host: 10.0.0.1
            port: 8080
            target-port: 8080
  # port-forwards would only be available on non-k8s sites
  port-forwards:
    - address: "forward-1"
      hosts: # instead of setting only loopback (bool)
        - "0.0.0.0"
      ports:
        - 1234
  # links to be created
  links:
    - name: "site-2"
      host: "host.domain"
      port: 443
      credential: "site-2"
  credentials:
    # including internal ones (they can be omitted)
    # but we could allow users to specify their own CAs if needed
    # Supported types could be initially: internal or vault
    - name: "skupper-site-ca"
      type: "internal" # internal type can omit further details by default (i.e. skupper generated)
    - name: "skupper-site-server"
      type: "internal"
    - name: "custom-site"
      type: "internal"
      provider: "custom-site" # reusable reference to a credential provider
    - name: "site-2"
      type: "vault"
      provider: "my-vault-instance"
  token-requests:
    - name: "site-3-to-site-1"
      type: "internal"
  credentialProviders:
    # one thing we will need to deal with, is how secrets/tokens will be stored
    # maybe we can recommend using git crypt / sealed secrets
    - name: my-vault-instance
      properties: # vault properties are just to illustrate not the real ones (tbd)
        url: "url"
        token: "token"
        token_id: "token_id"
        user_id: "user_id"
        username: "username"
        password: "password"
        role: "role"
    - name: custom-site # properties to override an internal credential info
      properties:
        ca.crt: "base64"
        tls.crt: "base64"
        tls.key: "base64"
