# Skupper site configuration
# - This sample contains all possible configuration options for the model
# - We can use the existing skupper-site configmap on Kubernetes, but with a "skupper.yaml" key
# - Skupper init can also take a new argument --config=<yaml>
site:
  # default initialization options
  name: "site-1"
  console: "true"
  # openshift option must be valid only for OpenShift
  console-authentication: "internal"
  router-logging: "info"
  router-mode: "interior"
# list of services to be created/exposed with all proposed options
services:
  # only the common fields (to all kind of sites):
  - address: "my-service"
    protocol: "http"
    ports:
      - 8080: 8080
    waitTargetAvailable: true
    skipIngress: "true" # if true (default is false) ingress will not be routed through Skupper
                        # false on non-k8s also can be used to express a "forward" used by the gateway today
                        # true on non-k8s is a gateway bind
    dependsOn:
      - "my-service-b"
      - "my-service-c"
    target: # one of
      # k8s, podman and docker (podman and docker they will be used as labels to filter containers)
      # invalid for systemd at the moment
      # if useful we can create a static map of targetRefs (with name, host/ip and labels)
      selectors:
        - key: "value"
      # invalid for systemd at the moment
      # if useful we can create a static map of targetRefs (with name, host/ip and labels)
      service:
        name: "my-service"
        external: "true" # if true (default is false) the service is expected to be created by an external provider (like an operator)
                         # if false:
                         # - on k8s a service will be created/modified by skupper
                         # - on docker a service can be created on podman if external is false (means create a service) we could run
                         #   an edge router with the "my-service" (address) to enable DNS to other containers
      host: 0.0.0.0
# links to be created
links:
  # name, host and port are optional fields on kubernetes
  # as they can be provided by the credential (secret)
  - name: "site-2"
    host: "host.domain"
    port: 443
    credential: "site-2"
credentials:
  # Supported types could be initially: internal or vault
  # both will depend on a credentialProvider that has a name and a set of properties
  # each "type" will parse their expected settings.
  #
  # We should not write direct certificates or passwords to the properties,
  # instead we should just add references to the location where the credentials
  # can be located.
  #
  # In a k8s environment, the reference could be a secret with appropriate keys,
  # while in a non-k8s it could be a directory or file.
  - name: "site-2"
    type: "vault"
    provider: "my-vault-instance"
  - name: "site-3"
    type: "internal"
    provider: "custom-site" # reusable reference to a credential provider
credentialProviders:
  # one thing we will need to deal with, is how secrets/tokens will be stored
  # maybe we can recommend using git crypt / sealed secrets
  - name: my-vault-instance
    properties: # vault properties are just to illustrate not the real ones (tbd)
      url: "url"
      token: "token"
      token_id: "token_id"
      user_id: "user_id"
      username: "username"
      password: "password"
      role: "role"
  - name: custom-site # properties to override an internal credential info
    properties:
      ca.crt: "base64"
      tls.crt: "base64"
      tls.key: "base64"
token-requests:
  # A regular request to create a token as done by the site-controller today
  # Not yet sure if it is actually needed here or if we should keep it in site-controller only
  - name: "site-3-to-site-1"
# platform specific properties
# - an alternative would be to use a separate configmap/file
# - only kubernetes flags at the moment
site-properties:
  ingress: "loadbalancer"
  ingress-annotations:
    - key: "value"
  ingress-host: "host.domain"
  annotations:
    - key: "value"
  labels:
    - key: "value"
  service-controller: "true"
  service-sync: "true"
  create-network-policy: "true"
  routers: 1
  router-cpu: ""
  router-cpu-limit: ""
  router-memory: ""
  router-memory-limit: ""
  router-node-selector: ""
  router-pod-affinity: ""
  router-pod-antiaffinity: ""
  router-ingress-host: ""
  router-service-annotations:
    - key: "value"
  router-load-balancer-ip: ""
  controller-cpu: ""
  controller-cpu-limit: ""
  controller-memory: ""
  controller-memory-limit: ""
  controller-node-selector: ""
  controller-pod-affinity: ""
  controller-pod-antiaffinity: ""
  controller-ingress-host: ""
  controller-service-annotations:
    - key: "value"
  controller-load-balancer-ip: ""
