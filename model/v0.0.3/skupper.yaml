# Skupper site configuration
# - This sample contains all possible configuration options for the model
site:
  name: "site-1"
  mode: "interior"
  logging: "info"
  service-controller: "true"
  service-sync: "true"
  routers: 1
# Console configuration (optional)
console:
  enabled: "true"
  authentication: "internal"
  user: ""
  password: ""
# Ingress configuration (optional)
ingress:
  type: "loadbalancer"
  annotations:
    - key: "value"
  host: "host.domain"
  router-host: ""
  controller-host: ""
  router-load-balancer-ip: ""
  controller-load-balancer-ip: ""
# list of services to be created/exposed with all proposed options
services:
  # only the common fields (to all kind of sites):
  - address: "my-service"
    protocol: "http"
    ports:
      - 8080: 8080
    waitTargetAvailable: true
    skipIngress: "true" # if true (default is false) ingress will not be routed through Skupper
      # false on non-k8s also can be used to express a "forward" used by the gateway today
    # true on non-k8s is a gateway bind
    dependsOn:
      - "my-service-b"
      - "my-service-c"
    target: # one of
      # k8s, podman and docker (podman and docker they will be used as labels to filter containers)
      # invalid for systemd at the moment
      # if useful we can create a static map of targetRefs (with name, host/ip and labels)
      selectors:
        - key: "value"
      # invalid for systemd at the moment
      # if useful we can create a static map of targetRefs (with name, host/ip and labels)
      service:
        name: "my-service"
        external: "true" # if true (default is false) the service is expected to be created by an external provider (like an operator)
          # if false:
          # - on k8s a service will be created/modified by skupper
          # - on containers we create an edge router with the "my-service" (address) to enable DNS to other containers (headless proxy)
    enable-tls: true # only valid for http2
    aggregate: "" # empty (default), json or multipart
    event-channel: false
    headless:
      enabled: true
      cpu: true
      cpu-limit: true
      memory: true
      memory-limit: true
      node-selector: ""
      pod-affinity: ""
      pod-antiaffinity: ""
# links to be created
links:
  # name, host and port are optional fields on kubernetes
  # as they can be provided by the credential (secret)
  - name: "site-2"
    host: "host.domain"
    port: 443
    cost: 1
    credential: "site-2"
    password: "" # optional - if populated handle it internally as a token claim
credentials:
  # Supported types could be initially: internal (default) or vault
  # both have a properties attribute that will vary based on type.
  #
  # We should not write direct certificates or passwords to the properties,
  # instead we should just add references to the location where the credentials
  # can be located.
  #
  # In a k8s environment, the reference could be a secret with appropriate keys,
  # while in a non-k8s it could be a directory or file.
  - name: "site-2"
    type: "vault"
    properties: # vault properties are just to illustrate not the real ones (tbd)
      url: "url"
      token: "token"
      token-ref: "secret-or-file-providing-token"
  - name: "site-3"
    type: "internal"
    # optional for internal type (omitting will cause secret/file, named as the credential, to be used)
    properties:
      ca.crt: "base64"
      tls.crt: "base64"
      tls.key: "base64"
tokens:
  # A regular request to create a token as done by the site-controller today
  # Not yet sure if it is actually needed here or if we should keep it in site-controller only
  - name: "site-3-to-site-1"
    type: "claim" # Default: cert
    # The following fields are only useful if type is claim
    expiry: ""
    password: ""
    uses: ""
# general site properties
# some properties are platform specific
# - an alternative would be to use a separate configmap/file
# - only kubernetes flags at the moment (Discuss if they must be qualified)
site-properties:
  annotations:
    - key: "value"
  labels:
    - key: "value"
  create-network-policy: "true"
  router-cpu: ""
  router-cpu-limit: ""
  router-memory: ""
  router-memory-limit: ""
  router-node-selector: ""
  router-pod-affinity: ""
  router-pod-antiaffinity: ""
  router-service-annotations:
    - key: "value"
  controller-cpu: ""
  controller-cpu-limit: ""
  controller-memory: ""
  controller-memory-limit: ""
  controller-node-selector: ""
  controller-pod-affinity: ""
  controller-pod-antiaffinity: ""
  controller-service-annotations:
    - key: "value"